buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexusPluginVersion"
    classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$configurationsPluginVersion"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
  }
}

apply plugin: 'distribution'
apply plugin: 'io.codearte.nexus-staging'

ext.libVersion = file('version.txt').text.trim()

subprojects {
  apply plugin: 'maven'
  apply plugin: 'kotlin'
  apply plugin: 'signing'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'org.jetbrains.dokka'
  apply plugin: 'jacoco'

  ext {
    isReleaseVersion = !libVersion.endsWith('SNAPSHOT')
  }

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  sourceCompatibility = 1.6
  targetCompatibility = 1.6
  group = libGroup
  version = libVersion
  archivesBaseName = projectName

  dependencies {
    provided "com.badlogicgames.gdx:gdx:$gdxVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "io.kotlintest:kotlintest:$kotlinTestVersion"
    testCompile "com.nhaarman:mockito-kotlin:$kotlinMockitoVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  }

  jar {
    from project.sourceSets.main.output
    baseName = archivesBaseName
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "$buildDir/dokkaJavadoc"
  }

  task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokkaJavadoc"
  }

  javadocJar.dependsOn('dokkaJavadoc')
  
  task dokkaZip(type: Zip) {
    from "$buildDir/dokka"
  }

  dokkaZip.dependsOn('dokka')

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives jar, javadocJar, sourcesJar
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name = projectName
          packaging 'jar'
          description = projectDesc
          url 'http://github.com/libktx/ktx'

          licenses {
            license {
              name 'CC0-1.0'
              url 'https://creativecommons.org/publicdomain/zero/1.0/'
            }
          }
          
          scm {
            connection 'scm:git:git@github.com:libktx/ktx.git'
            developerConnection 'scm:git:git@github.com:libktx/ktx.git'
            url 'http://github.com/libktx/ktx/'
          }

          developers {
            developer {
              id 'mj'
              name 'MJ'
              email 'john.hervicc@gmail.com'
            }
          }
        }
      }
    }
  }
}

nexusStaging {
  packageGroup = libGroup
  username = ossrhUsername
  password = ossrhPassword
}

distributions {
  main {
    baseName = libVersion
    contents {
      project.subprojects.each { sub ->
        into('lib') {
          from sub.jar
        }
        into('src') {
          from sub.sourcesJar
        }
        into('doc') {
          from sub.javadocJar
        }
        into('dokka') {
          from sub.dokkaZip
        }
      }
    }
  }
}

